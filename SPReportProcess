package project;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;

/**
 * @author sgill
 *
 */
public class SPReportProcess implements ReportProcess{
	
	final String TARGET_SERVER = "jdbc:sqlserver://sonic612.database.windows.net:1433;";
	final String TARGET_DB = "ChocAn";
	
	String connString;
	String dbUser;
	String dbPass;
	
	Connection connection;
    final String REPORT_STMT = "SELECT FROM tbl_Encounter WHERE";
    final String WRITE_STMT = "INSERT INTO tbl_ProvReport(record_date,Content) VALUES(";
    ResultSet resultProvSet;
    String[] reportContent;
    
    public SPReportProcess(String user, String password){
    	init(user,password);
    }
    
    private void init(String user, String password){
    	this.dbUser = user;
    	this.dbPass = password;
    	this.connString = TARGET_SERVER + ";" 
                + "database="+ TARGET_DB + ";"
                + "user=" + dbUser + ";"
                + "password={" + dbPass + "};"
                + "encrypt=true;"
                + "trustServerCertificate=false;"
                + "hostNameInCertificate=*.database.windows.net;"
                + "loginTimeout=60;";
    	try {
            connection = DriverManager.getConnection(connString);
    	}
    	catch(SQLException e){
    		System.out.println(e.getErrorCode()+ " " + e.getMessage());
    	}
    }
    
	@Override
	public void printReport(int id, String startDate) {
		//Checking date format
		if(startDate == null){
			throw new RuntimeException("The date entered for report generation is invalid or null.");
		}		
		SimpleDateFormat sdf = new SimpleDateFormat("mm/dd/yyyy");
		sdf.setLenient(false);	
		try {
			Date date = sdf.parse(startDate);		
		} 
		catch (ParseException e) {	
			e.printStackTrace();
		}
		
		//Report Generation
	}

	@Override
	public void printReport(String startDate) {
		throw new UnsupportedOperationException("Alternate form of same method valid, provider ID is required");
	}

	@Override
	public void termConnection() {
		try {
			connection.close();
		} catch (SQLException e) {
			System.out.println(e.getErrorCode()+ " " + e.getMessage());
		}
	}

	@Override
	public void saveReport() {
		StringBuilder strBuilder = new StringBuilder();
		for (int i = 0; i < reportContent.length; i++) {
		   strBuilder.append( reportContent[i] + "\n" );
		}
		String repString = strBuilder.toString();
		DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd");
		Date date = new Date();
		Statement insertStmt;
		try {
			insertStmt = connection.createStatement();
			insertStmt.execute(WRITE_STMT + dateFormat.format(date) + "," + repString + ");");
		} catch (SQLException e) {
			System.out.println(e.getErrorCode()+ " " + e.getMessage());
		}		
	}

}
