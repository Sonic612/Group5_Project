package Project;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;

import com.microsoft.sqlserver.jdbc.*;

/**
 * @author lle
 *
 */

public class MemReportProcess implements ReportProcess{
	final String TARGET_SERVER = "jdbc:sqlserver://sonic613.database.windows.net:1433;";
	final String TARGET_DB = "ChocAn";
	
	private Connection connection;
	private String connString;
	private String dbUser;
	private String dbPass;
	public Connection dbTarget;
	private String reportString;
	
	final String WRITE_STMT = "INSERT INTO tbl_MemReport(record_date,Content) VALUES(";
	ResultSet resultMemSet;
    ResultSet resultEnctrSet;
	String repString = "";
	
	final String MEMHEADER = "SELECET Mem_Name, Mem_ID, Mem_Address, "
			+ "Mem_City, Mem_State, Zip "
			+ "\nFROM tbl_Member "
			+ "\nWHERE Mem_ID = ;";

	final String ENCTRHEADER = "SELECET tbl_Encounters.Enctr_date, "
			+ " tbl_Provider.Prov_Name, tbl_Services.serv_name"
			+ "\nFROM tbl_Encounters "
			+ "\nJOIN tbl_Provider \n  ON tbl_Encounters.Prov_ID = tbl_Provider.Prov_ID"
			+ "\nJOIN tbl_Services \n ON tbl_Encounters.serv_code = tbl_Services.serv_code"
			+ "\nWHERE Mem_ID = ? AND record_date BETWEEN ? AND ?;";
	
	private PreparedStatement Stmt1;
	private PreparedStatement Stmt2;
	
	public MemReportProcess(String user, String password){
		init(user, password);
	}
	
	private void init(String user, String password){
    	this.dbUser = user;
    	this.dbPass = password;
    	this.connString = TARGET_SERVER + ";" 
                + "database="+ TARGET_DB + ";"
                + "user=" + dbUser + ";"
                + "password={" + dbPass + "};"
                + "encrypt=true;"
                + "trustServerCertificate=false;"
                + "hostNameInCertificate=*.database.windows.net;"
                + "loginTimeout=60;";
  

    	try {
            connection = DriverManager.getConnection(connString);
    	}
    	catch(SQLException e){
    		System.out.println(e.getErrorCode()+ " " + e.getMessage());
    	}
    }

	@Override
	public void computeReport(int id, String strDate, String endDate) {
		//SQL queries
		//Member name, Member number, Member street address, Member city, Member state, Member ZIP code
		//Date of service, Provider name, Service name
		try {
			Stmt1.setInt(1, id);
			resultMemSet = Stmt1.executeQuery();
			connection.commit();
			
			Stmt2.setInt(1, id);
			Stmt2.setDate(2, java.sql.Date.valueOf(strDate));
			Stmt2.setDate(3, java.sql.Date.valueOf(endDate));
			resultEnctrSet = Stmt2.executeQuery();
			connection.commit();
			
		} catch (SQLException e) {
			System.out.println(e.getErrorCode()+ " " + e.getMessage());
		}	
	}

	@Override
	public void computeReport(String startDate) {
		throw new UnsupportedOperationException("Alternate form of same method valid, member ID is required");
	}

	@Override
	public String printReport() {
		String memStr = ""; 
		String sqlMemStr = "";
		ArrayList<String> enctrList = new ArrayList<String>();
		ArrayList<String> sqlEnctrList = new ArrayList<String>();
		
		//Result Sets parsed into a single report string
		try {
			while(resultMemSet.next()){
				String name = resultMemSet.getString("Mem_Name");
				int number = resultMemSet.getInt("Mem_ID");
				String address = resultMemSet.getString("Mem_Address");
				String city = resultMemSet.getString("Mem_City");
				String state = resultMemSet.getString("Mem_State");
				int zip = resultMemSet.getInt("Zip");
				
				memStr = "Member Name : " + name + "/nMember Number : " + number + "/nMember Street Address : "
						+ address + "/nMember City : " + city + "/nMember State  :" + state + "Member ZIP : " + zip;
				
				sqlMemStr = "Member Name : " + name + "," + "Member Number : " + number + "," + "Member Street Address : "
						+ address + "," + "Member City : " + city + "," + "Member State  :" + state + "," + "Member ZIP : " + zip + ",";
			}
		} catch (SQLException e) {
			System.out.println(e.getErrorCode()+ " " + e.getMessage());
		}
		
		try {
			while(resultEnctrSet.next()){
				java.sql.Date enctrDate = resultEnctrSet.getDate("Enctr_Date");
				String provNameStr = resultEnctrSet.getString("Prov_Name");
				String servNameStr = resultEnctrSet.getString("serv_name");
				
				String tempStr = "\n-------Service Details--------\nDate of Service : " + enctrDate.toString() + "/nProvider Name: " + provNameStr
						+ "/nService Name: " + servNameStr;
				enctrList.add(tempStr);
				String tempStr2 = ",-------Service Details--------,Date of Service : " + enctrDate.toString() + "," + "Provider Name: " + provNameStr
						+ "," + "Service Name: " + servNameStr;
			}
		} catch (SQLException e) {
				System.out.println(e.getErrorCode()+ " " + e.getMessage());
				
		}
		
		return repString = memStr + enctrStr;
	}

	@Override
	public void termConnection() {
		try {
			connection.close();
		} catch (SQLException e) {
			System.out.println(e.getErrorCode()+ " " + e.getMessage());
		}
	}

	@Override
	public void saveReport() {
		DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
		Date date = new Date();
		Statement insertStmt;
		try {
			insertStmt = connection.createStatement();
			insertStmt.execute(WRITE_STMT + dateFormat.format(date) + "," + repString + ");");
		} catch (SQLException e) {
			System.out.println(e.getErrorCode()+ " " + e.getMessage());
		}	
		
	}

}
