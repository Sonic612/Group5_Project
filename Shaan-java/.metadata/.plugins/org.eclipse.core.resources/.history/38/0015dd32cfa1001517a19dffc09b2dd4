package project;

import java.math.BigDecimal;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;

	public class MngReportProcess implements ReportProcess{
		final String TARGET_SERVER = "jdbc:sqlserver://sonic613.database.windows.net:1433;";
		final String TARGET_DB = "ChocAn";
		
		private String connString;
		private String dbUser;
		private String dbPass;
		
		private Connection connection;
		private ResultSet resultProvSet;
		private ResultSet resultNumProv;
		private ResultSet resultNumEnctrs;
		private ResultSet resultTotalFee;

	 	// Prepared Statements
	    private PreparedStatement Stmt1;
		private PreparedStatement Stmt2;
		private PreparedStatement Stmt3;
		private PreparedStatement Stmt4;
		private PreparedStatement Stmt5;
		private PreparedStatement Stmt6;
		//
		
		private String repStartDate;
		private String repEndDate;
		
		String repString = "";
		
		final String WRITE_STMT = "INSERT INTO tbl_EFTReport(record_date,Content) VALUES(?,?);";
		
		final String QRY_PROVIDER = "SELECT dbo.tbl_Encounters.Prov_ID, dbo.tbl_Provider.Prov_Name, dbo.tbl_Service.SERV_fee,"
  				+ "\nJOIN dbo.tbl_Services ON dbo.tbl_Encounters.serv_code = dbo.tbl_Services.serv_code"
  				+ "\nWHERE record_date BETWEEN ? AND ?;";
		
		final String QRY_NUMOFPROV = "SELECT COUNT(DISTINCT Prov_ID) AS NumOfProviders"
	  				+ "\nFROM dbo.tbl_Encounters"
	  				+ "\nWHERE record_date BETWEEN ? AND ?;";
		
		final String QRY_NUMOF_PROV_ENCTRS = "SELECT COUNT(UID) AS NumOfConsultations"
  				+ "\nFROM dbo.tbl_Encounters"
  				+ "\nWHERE Prov_ID=? AND record_date BETWEEN ? AND ?;";
		
		final String QRY_PROV_TOTAL_FEE = "SELECT SUM(dbo.tbl_Services.SERV_fee) AS ProviderDues"
				+ "\nFROM dbo.tbl_Encounters "
				+ "\nJOIN dbo.tbl_Services ON dbo.tbl_Encounters.serv_code = dbo.tbl_Services.serv_code"
				+ "\nWHERE Prov_ID=? AND record_date BETWEEN ? AND ?;";
		
		final String QRY_TOTALFEE = "SELECT SUM(dbo.tbl_Services.SERV_fee) AS TotalDues"
				+ "\nFROM dbo.tbl_Encounters "
				+ "\nJOIN dbo.tbl_Services ON dbo.tbl_Encounters.serv_code = dbo.tbl_Services.serv_code"
				+ "\nWHERE record_date BETWEEN ? AND ?;";
		
		
		public MngReportProcess(String user, String password){
			init(user, password);
		}
		
		private void init(String user, String password){
	    	this.dbUser = user;
	    	this.dbPass = password;
	    	this.connString = TARGET_SERVER + ";" 
	                + "database="+ TARGET_DB + ";"
	                + "user=" + dbUser + ";"
	                + "password={" + dbPass + "};"
	                + "encrypt=true;"
	                + "trustServerCertificate=false;"
	                + "hostNameInCertificate=*.database.windows.net;"
	                + "loginTimeout=60;";
	  

	    	try {
	            connection = DriverManager.getConnection(connString);
	            Stmt1 = connection.prepareStatement(QRY_PROVIDER);
	            Stmt2 = connection.prepareStatement(QRY_NUMOF_PROV_ENCTRS);
	            Stmt3= connection.prepareStatement(QRY_PROV_TOTAL_FEE);
	            Stmt4 = connection.prepareStatement(QRY_NUMOFPROV);
	            Stmt5 = connection.prepareStatement(QRY_TOTALFEE);
	            Stmt6 =  connection.prepareStatement(WRITE_STMT);

	    	}
	    	catch(SQLException e){
	    		System.out.println(e.getErrorCode()+ " " + e.getMessage());
	    	}
	    }


		@Override
		public void computeReport(int id, String startDate, String endDate) {
			throw new UnsupportedOperationException("Alternate form of same method valid, No ID is required");

		}

		@Override
		public void computeReport(String startDate, String endDate) {
			
			this.repStartDate = startDate;
			this.repEndDate = endDate;
			Stmt1.setDate(1, java.sql.Date.valueOf(startDate));
			Stmt1.setDate(2, java.sql.Date.valueOf(endDate));
			resultProvSet = Stmt1.executeQuery();
			connection.commit();
			
			Stmt4.setDate(2, java.sql.Date.valueOf(startDate));
			Stmt4.setDate(3, java.sql.Date.valueOf(endDate));
			resultNumProv = Stmt4.executeQuery();
			connection.commit();
			
			Stmt5.setDate(2, java.sql.Date.valueOf(startDate));
			Stmt5.setDate(3, java.sql.Date.valueOf(endDate));
			resultTotalFee = Stmt5.executeQuery();
			connection.commit();		
		}
		
		@Override
		public String printReport() {
			String providerStr = ""; 
			ArrayList<String> provList = new ArrayList<String>(); 
			String finalStr = "";
			
			//Result Sets parsed into a single report string
			try {
				while(resultProvSet.next()){
				int number = resultProvSet.getInt("Prov_ID");
				String name = resultProvSet.getString("Prov_Address");
				double fee = resultProvSet.getFloat("SERV_fee");
				
				Stmt2.setInt(1, number);
				Stmt2.setDate(2,repStartDate);
				Stmt2.setDate(3,repStartDate);
					
				providerStr = "Provider ID: " + number + "\nProvider Name: " + name + "\nProvider Street Address: "
							+ address + "\nProvider City: " + city + "\nProvider State: " + state + "\nProvider ZIP: " + zip;	
				
				sqlProvStr = "Provider Name:" + name + "," + "Provider Number: " + Integer.toString(number) + "," 
						+ "Provider Street Address: " + address + "," + "Provider City: " + city + "," + 
						"Provider State: " + state + "," + "Zip: " + zip + ",";
				
				
				}	
			} catch (SQLException e) {
				System.out.println(e.getErrorCode()+ " - " + e.getMessage());
			}
		}

		@Override
		public void termConnection() {
			try {
				connection.close();
			} catch (SQLException e) {
				System.out.println(e.getErrorCode()+ " " + e.getMessage());
			}
		}

		@Override
		public void saveReport(int ID) {
			throw new UnsupportedOperationException("Alternate form of same method valid, No ID is required");			
		}

		@Override
		public void saveReport() {
			// TODO Auto-generated method stub
			
		}

	}

}
